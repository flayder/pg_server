const fs = require("fs-extra");
const path = require("path");
const unzipper = require("unzipper");
const { exec } = require("child_process");

const FRONTEND_PATH = "/var/www/porngamestown.com/html"; // –ø—É—Ç—å –¥–æ .output
const FRONTEND_PATH_DELETE = "/var/www/porngamestown.com/html/.output"; // –ø—É—Ç—å –¥–æ .output
const TEMP_PATH = path.join(__dirname, "../tmp/upload.zip"); // –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤
const EXTRACT_PATH = path.join(__dirname, "../tmp/extracted"); // –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞

// üî• –û—á–∏—Å—Ç–∫–∞ –ø–∞–ø–∫–∏ .output
exports.clearOutput = async (req, res) => {
  try {
    await fs.remove(FRONTEND_PATH_DELETE);
    res.status(200).json({ message: "–ü–∞–ø–∫–∞ .output —É–¥–∞–ª–µ–Ω–∞" });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ .output:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ .output" });
  }
};

// üî• –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –±–∏–ª–¥–∞
exports.uploadFrontend = async (req, res) => {
  try {
    if (!req.files || !req.files.zip) {
      return res.status(400).json({ message: "ZIP-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    const zip = req.files.zip;
    const tempPath = path.join(__dirname, "../tmp/upload.zip");

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ä—Ö–∏–≤ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
    await zip.mv(tempPath);

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é .output
    await fs.remove(FRONTEND_PATH);
    //await fs.ensureDir(FRONTEND_PATH);

    // –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤
    await fs.createReadStream(tempPath).pipe(unzipper.Extract({ path: FRONTEND_PATH }));

    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π zip
    await fs.remove(tempPath);

    res.status(200).json({ message: "–§—Ä–æ–Ω—Ç–µ–Ω–¥ –æ–±–Ω–æ–≤–ª—ë–Ω!" });

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ—Ä–æ–Ω—Ç–∞:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ—Ä–æ–Ω—Ç–∞" });
  }
};

// üî• –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–∞ —á–µ—Ä–µ–∑ PM2
exports.restartFrontend = async (req, res) => {
  exec("pm2 restart myapp", (err, stdout, stderr) => {
    if (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Ñ—Ä–æ–Ω—Ç–∞:", err);
      return res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Ñ—Ä–æ–Ω—Ç–∞" });
    }
    res.status(200).json({ message: "–§—Ä–æ–Ω—Ç–µ–Ω–¥ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!" });
  });
};
